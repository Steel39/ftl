version: '3.8'
services:

  # Backend контейнер
  backend:
    # Для установки нужных пакетов используем не чистый образ, а инструкции из конкретного файла Dockerfile
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - .:/var/www # Монтируем локальную папку в контейнер как /var/www
      - ./docker/backend/php.ini:/usr/local/etc/php/php.ini
    depends_on:
      - db
      - redis
    container_name: "${BACKEND_CONTAINER_NAME}"

  # Nginx контейнер для вебсервера
  nginx:
    # Используем готовый образ для nginx контейнера
    image: nginx:alpine
    restart: unless-stopped
    tty: true
    ports:
      - "80:80" # Внутренний порт контейнера пробрасываем на host машину
    volumes:
      - .:/var/www # Монтируем локальную папку в контейнер как /var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/ # Передаем в контейнер конфигурационные файлы nginx
    depends_on:
      - backend
    container_name: nginx

  # MySQL контейнер
  db:
    image: mysql:8.0.14
    restart: unless-stopped
    tty: true
    ports:
      - "${DB_PORT}:3306"
    command: ['--character-set-server=utf8mb4',
              '--collation-server=utf8mb4_unicode_ci',
              '--default-authentication-plugin=mysql_native_password' ]
    environment:
      # Желаемые настройки для СУБД MySQL
      SERVICE_TAGS: dev
      SERVICE_NAME: "${DB_CONTAINER_NAME}"
      MYSQL_USER: "${DB_USERNAME}"
      MYSQL_DATABASE: "${DB_DATABASE}"
      MYSQL_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
    volumes:
      - ./db/mysql:/var/lib/mysql-files  # Используем именованный том из блока volumes
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf # Передаем в контейнер конфигурационный файл
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping" ]
    container_name: "${DB_CONTAINER_NAME}"

  # Для сборки js
  node:
    build:
        context: .
        dockerfile: ./docker/frontend/Dockerfile
    tty: true
    ports:
        - "5173:5173"
    working_dir: /var/www
    volumes:
        - .:/var/www # Монтируем локальную папку в контейнер как /var/www
    container_name: "${FRONTEND_CONTAINER_NAME}"

  # Redis контейнер
  redis:
    image: redis:latest
    restart: always
    ports:
      - "9736:9736"
    volumes:
      - ./db/redis:/root/redis
      - ./docker/redis:/usr/local/etc/redis
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=9736
      - REDIS_DATABASES=16
    container_name: redis
    depends_on:
      - db
